 // <autogenerated />
using System;
using System.Linq;
using HydrationPrototype.Interfaces;
using Neo4j.Driver;
namespace MappingTest;
public partial class TestQueryRow : IRecordHydratable
{
    public void HydrateFromRecord(IRecord record, IDictionary<string, object> instances)
    {
// populate Person property
var Person_node_0 = record["person"].As<INode>();
if (instances.TryGetValue(Person_node_0.ElementId, out var foundPerson_0))
{
    Person = (Person)foundPerson_0;
}
else
{
    Person = new Person();
    ((INodeHydratable)Person).HydrateFromNode(Person_node_0);
    instances[Person_node_0.ElementId] = Person;
}

//-------------------

// populate Movie property
var Movie_node_1 = record["movie"].As<INode>();
if (instances.TryGetValue(Movie_node_1.ElementId, out var foundMovie_1))
{
    Movie = (Movie)foundMovie_1;
}
else
{
    Movie = new Movie();
    ((INodeHydratable)Movie).HydrateFromNode(Movie_node_1);
    instances[Movie_node_1.ElementId] = Movie;
}

//-------------------


var ActedInRelationship_rel_2 = record["relationship"].As<IRelationship>();
if(ActedInRelationship_rel_2.Type == "ACTED_IN")
{
    ActedInRelationship = new ActedInRelationship();
    ((IRelationshipHydratable)ActedInRelationship).HydrateFromRelationship(ActedInRelationship_rel_2, instances);
}


var DirectedRelationship_rel_2 = record["relationship"].As<IRelationship>();
if(DirectedRelationship_rel_2.Type == "DIRECTED")
{
    DirectedRelationship = new DirectedRelationship();
    ((IRelationshipHydratable)DirectedRelationship).HydrateFromRelationship(DirectedRelationship_rel_2, instances);
}

    }
}