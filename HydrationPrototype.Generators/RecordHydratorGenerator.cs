using HydrationPrototype.Attributes;
using HydrationPrototype.Interfaces;
using HydrationPrototype.RoslynHelpers;
using Microsoft.CodeAnalysis;

namespace HydrationPrototype.Generators;

[Generator]
public class RecordHydratorGenerator : PropertyHydrationGenerator<GenerateHydrationFromRecordAttribute>
{
    private int _propertyIndex;

    private string GetNodePropertySetter(IPropertySymbol property, string sourceProperty)
    {
        var name = property.Name;
        var id = _propertyIndex.ToString();
        var nodeVar = $"{name}_node_{id}";
        var type = property.Type.Name;

        var result = @$"// populate {name} property
var {nodeVar} = record[""{sourceProperty}""].As<INode>();
if (instances.TryGetValue({nodeVar}.ElementId, out var found{name}_{id}))
{{
    {name} = ({type})found{name}_{id};
}}
else
{{
    {name} = new {type}();
    ((INodeHydratable){name}).HydrateFromNode({nodeVar});
    instances[{nodeVar}.ElementId] = {name};
}}

//-------------------
";
        _propertyIndex++;
        return result;
    }

    private string GetRelationshipPropertySetter(IPropertySymbol property, string sourceProperty, string relationshipType)
    {
        var name = property.Name;
        var id = _propertyIndex.ToString();
        var relationshipVar = $"{name}_rel_{id}";
        var type = property.Type.Name;
        return @$"
var {relationshipVar} = record[""{sourceProperty}""].As<IRelationship>();
if({relationshipVar}.Type == ""{relationshipType}"")
{{
    {name} = new {type}();
    ((IRelationshipHydratable){name}).HydrateFromRelationship({relationshipVar}, instances);
}}
";
    }

    protected override string GetPropertySetter(IPropertySymbol property, string sourceProperty, Attribute attribute)
    {
        return attribute switch
        {
            HydrateFromNodeAttribute => GetNodePropertySetter(property, sourceProperty),
            HydrateFromRelationshipAttribute r => GetRelationshipPropertySetter(property, sourceProperty, r.Type),
            _ => ""
        };
    }

    public override string GetGeneratedSourceCode(ClassCompileInfo classCompileInfo)
    {
        _propertyIndex = 0;
        var nodePropertySetterCode =
            GetPropertySetterCode<HydrateFromNodeAttribute>(classCompileInfo, a => a.NodeName);

        var relationshipPropertySetterCode =
            GetPropertySetterCode<HydrateFromRelationshipAttribute>(classCompileInfo, a => a.RelationshipName);

        return $@" // <autogenerated />
using System;
using System.Linq;
using HydrationPrototype.Interfaces;
using Neo4j.Driver;
namespace {classCompileInfo.Symbol.ContainingNamespace.Name};
public partial class {classCompileInfo.Syntax.Identifier} : {nameof(IRecordHydratable)}
{{
    public void HydrateFromRecord(IRecord record, IDictionary<string, object> instances)
    {{
{nodePropertySetterCode}
{relationshipPropertySetterCode}
    }}
}}";
    }
}
