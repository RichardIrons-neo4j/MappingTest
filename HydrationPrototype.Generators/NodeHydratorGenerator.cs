using HydrationPrototype.Attributes;
using HydrationPrototype.Interfaces;
using HydrationPrototype.RoslynHelpers;
using Microsoft.CodeAnalysis;

namespace HydrationPrototype.Generators;

[Generator]
public class NodeHydratorGenerator : PropertyHydrationGenerator<GenerateHydrationFromNodeAttribute>
{
    protected override string GetPropertySetter(IPropertySymbol property, string sourceProperty, Attribute attribute)
    {
        return $"{property.Name} = node.Properties[\"{sourceProperty}\"].As<{property.Type.GetFullName()}>();"; }

    public override string GetGeneratedSourceCode(ClassCompileInfo classCompileInfo)
    {
        var propertySetterCode =
            GetPropertySetterCode<HydrateFromPropertyAttribute>(classCompileInfo, a => a.PropertyName);

        return $@" // <autogenerated />
using System;
using System.Collections.Generic;
using HydrationPrototype;
using HydrationPrototype.Interfaces;
using Neo4j.Driver;
namespace {classCompileInfo.Symbol.ContainingNamespace.GetFullName()};
public partial class {classCompileInfo.Syntax.Identifier} : {nameof(NodeHydratableBase)}, {nameof(INodeHydratable)}
{{
    public void HydrateFromNode(INode node)
    {{
{propertySetterCode}
    }}
}}";
    }
}
