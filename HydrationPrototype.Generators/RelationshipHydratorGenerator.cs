using HydrationPrototype.Attributes;
using HydrationPrototype.Interfaces;
using HydrationPrototype.RoslynHelpers;
using Microsoft.CodeAnalysis;

namespace HydrationPrototype.Generators;

[Generator]
public class RelationshipHydratorGenerator : PropertyHydrationGenerator<GenerateHydrationFromRelationshipAttribute>
{
    protected override string GetPropertySetter(IPropertySymbol property, string sourceProperty, Attribute attribute)
    {
        return $"{property.Name} = relationship.Properties[\"{sourceProperty}\"].As<{property.Type.GetFullMetadataName()}>();";
    }

    protected string GetRelationSetter<T>(ClassCompileInfo classCompileInfo, string nodeIdentifier, string otherEnd) where T : Attribute
    {
        var property = classCompileInfo.Symbol.GetPropertyMembers().FirstOrDefault(p => p.GetAttributeInstances<T>().Any());
        if (property is null)
        {
            return "";
        }

        var otherEndVar = property.Name + "_other_end";
        var hydratable = property.Name + "_hydratable";
        var generatedCode = $@"
var {otherEndVar} = instances[relationship.{otherEnd}];
{property.Name} = instances[relationship.{nodeIdentifier}].As<{property.Type.GetFullMetadataName()}>();
if({property.Name} is INodeHydratable {hydratable})
{{
    {hydratable}.AddRelationship<{classCompileInfo.Symbol.Name}>({otherEndVar});
}}
";
        return generatedCode;
    }

    public override string GetGeneratedSourceCode(ClassCompileInfo classCompileInfo)
    {
        var propertySetterCode =
            GetPropertySetterCode<HydrateFromPropertyAttribute>(classCompileInfo, a => a.PropertyName);

        return $@" // <autogenerated />
using System;
using HydrationPrototype.Interfaces;
using Neo4j.Driver;
namespace {classCompileInfo.Symbol.ContainingNamespace.GetFullName()};
public partial class {classCompileInfo.Syntax.Identifier} : {nameof(IRelationshipHydratable)}
{{
    public void HydrateFromRelationship(IRelationship relationship, IDictionary<string, object> instances)
    {{
{propertySetterCode}
{GetRelationSetter<RelationshipStartAttribute>(classCompileInfo, "StartNodeElementId", "EndNodeElementId")}
{GetRelationSetter<RelationshipEndAttribute>(classCompileInfo, "EndNodeElementId", "StartNodeElementId")}
    }}
}}";
    }
}
