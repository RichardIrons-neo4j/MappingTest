using HydrationPrototype.Attributes;
using HydrationPrototype.Interfaces;
using HydrationPrototype.RoslynHelpers;
using Microsoft.CodeAnalysis;

namespace HydrationPrototype.Generators;

[Generator]
public class RelationshipHydratorGenerator : PropertyHydrationGenerator<GenerateHydrationFromRelationshipAttribute>
{
    private Dictionary<ITypeSymbol, string> _fullMetadataNames = new(SymbolEqualityComparer.Default);

    protected override string GetPropertySetter(IPropertySymbol property, string sourceProperty, Attribute attribute)
    {
        return
            $"{property.Name} = relationship.Properties[\"{sourceProperty}\"].As<{property.Type.GetFullMetadataName()}>();";
    }

    private string MetadataName(ITypeSymbol typeSymbol)
    {
        if(_fullMetadataNames.TryGetValue(typeSymbol, out var result))
        {
            return result;
        }

        result = typeSymbol.GetFullMetadataName();
        _fullMetadataNames[typeSymbol] = result;
        return result;
    }

    protected string GetRelationSetter<T>(ClassCompileInfo classCompileInfo, string nodeIdentifier, string otherEnd)
        where T : Attribute
    {
        var property = classCompileInfo.Symbol.GetPropertyMembers()
            .FirstOrDefault(p => p.GetAttributeInstances<T>().Any());

        if (property is null)
        {
            return "";
        }

        var otherEndVar = property.Name + "_other_end";
        var generatedCode = $$"""

            var {{otherEndVar}} = instances[relationship.{{otherEnd}}];
            {{property.Name}} = ({{property.Type.GetFullMetadataName()}})(instances[relationship.{{nodeIdentifier}}]);
            {{property.Name}}.AddRelationship<{{classCompileInfo.Symbol.Name}}>({{otherEndVar}});

            """;

        return generatedCode;
    }

    public override string GetGeneratedSourceCode(ClassCompileInfo classCompileInfo)
    {
        var propertySetterCode =
            GetPropertySetterCode<HydrateFromPropertyAttribute>(classCompileInfo, a => a.PropertyName);

        return $$"""
             // <autogenerated />
            using System;
            using HydrationPrototype.Interfaces;
            using Neo4j.Driver;
            namespace {{classCompileInfo.Symbol.ContainingNamespace.GetFullName()}};
            public partial class {{classCompileInfo.Syntax.Identifier}} : {{nameof(IRelationshipHydratable)}}
            {
                public void HydrateFromRelationship(IRelationship relationship, IDictionary<string, object> instances)
                {
                    {{propertySetterCode}}

                    {{GetRelationSetter<RelationshipStartAttribute>(
                        classCompileInfo,
                        "StartNodeElementId",
                        "EndNodeElementId")}}

                    {{GetRelationSetter<RelationshipEndAttribute>(
                        classCompileInfo,
                        "EndNodeElementId",
                        "StartNodeElementId")}}
                }
            }
            """;
    }
}
